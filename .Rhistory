Sys.which(Sys.getenv("R_QPDF", "qpdf"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
.Last.error.trace
rw.M <- function(sigma, x0, N) {
x <- numeric(N)
x[1] <- x0
u <- runif(N)
k <- 0
for (i in 2:N) {
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (exp(abs(x[i-1])-abs(y)))) x[i] <- y
else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
N <- 1500
sigma <- c(.05, .5, 2, 16)#different variances
x0 <- 25
k <- length(sigma)
rw<-matrix(NA,ncol = N,nrow = k)# random walk chains
accept.rate<-numeric(k)# acceptance rate
for (i in 1:length(sigma)) {
rw[i,] <- rw.M(sigma[i], x0, N)$x
accept.rate[i] <- (N-rw.M(sigma[i], x0, N)$k)/N
}
rbind('sigma'=sigma,'acceptance rate'=accept.rate)
par(mfrow = c(2, 2))
for (i in 1:length(sigma)) {
plot(1:length(rw[i,]),rw[i,],"l",ylab = 'x',xlab = 'sigma')
}
par(mfrow = c(1,1))
devtools::document()
devtools::check()
l.chain <- function(sigma, N, X1) {
#generates a Metropolis chain for the standard Laplace distribution with Normal(X[t], sigma) proposal distribution and starting value X1
x <- rep(0, N)
x[1] <- X1
u <- runif(N)
for (i in 2:N) {
xt <- x[i-1]
y <- rnorm(1, xt, sigma) #candidate point
if (u[i] <= (exp(abs(x[i-1])-abs(y))))
x[i] <- y
else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(x)
}
Gelman.Rubin <- function(psi) {
# psi[i,j] is the statistic psi(X[i,1:j])
# for chain in i-th row of X
psi <- as.matrix(psi)
n <- ncol(psi)
k <- nrow(psi)
psi.means <- rowMeans(psi) #row means
B <- n * var(psi.means) #between variance est.
psi.w <- apply(psi, 1, "var") #within variances
W <- mean(psi.w) #within est.
v.hat <- W*(n-1)/n + (B/n) #upper variance est.
r.hat <- v.hat / W #G-R statistic
return(r.hat)
}
sigma <- 1 #parameter of proposal distribution
k <- 4 #number of chains to generate
n <- 15000 #length of chains
b <- 1000 #burn-in length
#choose over dispersed initial values
x0 <- c(-10, -5, 5, 10)
#generate the chains
X <- matrix(0, nrow=k, ncol=n)
for (i in 1:k) X[i, ] <- l.chain(sigma, n, x0[i])
#compute diagnostic statistics
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi)) psi[i,] <- psi[i,] / (1:ncol(psi))
print(Gelman.Rubin(psi))
#plot psi for the four chains
for (i in 1:k)
plot(psi[i, (b+1):n], type="l",xlab=i, ylab=bquote(psi))
par(mfrow=c(1,1)) #restore default
#plot the sequence of R-hat statistics
rhat <- rep(0, n)
for (j in (b+1):n)
rhat[j] <- Gelman.Rubin(psi[,1:j])
plot(rhat[(b+1):n], type="l", xlab="", ylab="R")
abline(h=1.2, lty=2)
sigma <- 1 #parameter of proposal distribution
k <- 4 #number of chains to generate
n <- 1500 #length of chains
b <- 1000 #burn-in length
#choose over dispersed initial values
x0 <- c(-10, -5, 5, 10)
#generate the chains
X <- matrix(0, nrow=k, ncol=n)
for (i in 1:k) X[i, ] <- l.chain(sigma, n, x0[i])
#compute diagnostic statistics
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi)) psi[i,] <- psi[i,] / (1:ncol(psi))
print(Gelman.Rubin(psi))
#plot psi for the four chains
for (i in 1:k)
plot(psi[i, (b+1):n], type="l",xlab=i, ylab=bquote(psi))
par(mfrow=c(1,1)) #restore default
#plot the sequence of R-hat statistics
rhat <- rep(0, n)
for (j in (b+1):n)
rhat[j] <- Gelman.Rubin(psi[,1:j])
plot(rhat[(b+1):n], type="l", xlab="", ylab="R")
abline(h=1.2, lty=2)
sigma <- 1 #parameter of proposal distribution
k <- 4 #number of chains to generate
n <- 3500 #length of chains
b <- 1000 #burn-in length
#choose over dispersed initial values
x0 <- c(-10, -5, 5, 10)
#generate the chains
X <- matrix(0, nrow=k, ncol=n)
for (i in 1:k) X[i, ] <- l.chain(sigma, n, x0[i])
#compute diagnostic statistics
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi)) psi[i,] <- psi[i,] / (1:ncol(psi))
print(Gelman.Rubin(psi))
#plot psi for the four chains
for (i in 1:k)
plot(psi[i, (b+1):n], type="l",xlab=i, ylab=bquote(psi))
par(mfrow=c(1,1)) #restore default
#plot the sequence of R-hat statistics
rhat <- rep(0, n)
for (j in (b+1):n)
rhat[j] <- Gelman.Rubin(psi[,1:j])
plot(rhat[(b+1):n], type="l", xlab="", ylab="R")
abline(h=1.2, lty=2)
devtools::build()
devtools::document()
devtools::document()
devtools::build_vignettes()
library(StatComp20009)
rw_Rcpp
rw.R
MC.theta
plot
devtools::document()
warnings()
devtools::document()
getnfac
rwRcpp
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(Rcpp)
library(StatComp20009)
dir_cpp <- '../Rcpp/'
sourceCpp(paste0(dir_cpp,"randomwalk.cpp"))
devtools::document()
devtools::check()
.Last.error.trace
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::build()
install.packages('../StatComp20009_1.0.tar.gz',repo=NULL)
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::build()
